// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/address.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressServicesClient is the client API for AddressServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressServicesClient interface {
	SearchAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*SearchAddressResponse, error)
}

type addressServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServicesClient(cc grpc.ClientConnInterface) AddressServicesClient {
	return &addressServicesClient{cc}
}

func (c *addressServicesClient) SearchAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*SearchAddressResponse, error) {
	out := new(SearchAddressResponse)
	err := c.cc.Invoke(ctx, "/pb.AddressServices/SearchAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServicesServer is the server API for AddressServices service.
// All implementations must embed UnimplementedAddressServicesServer
// for forward compatibility
type AddressServicesServer interface {
	SearchAddress(context.Context, *AddressRequest) (*SearchAddressResponse, error)
	mustEmbedUnimplementedAddressServicesServer()
}

// UnimplementedAddressServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServicesServer struct {
}

func (UnimplementedAddressServicesServer) SearchAddress(context.Context, *AddressRequest) (*SearchAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAddress not implemented")
}
func (UnimplementedAddressServicesServer) mustEmbedUnimplementedAddressServicesServer() {}

// UnsafeAddressServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServicesServer will
// result in compilation errors.
type UnsafeAddressServicesServer interface {
	mustEmbedUnimplementedAddressServicesServer()
}

func RegisterAddressServicesServer(s grpc.ServiceRegistrar, srv AddressServicesServer) {
	s.RegisterService(&AddressServices_ServiceDesc, srv)
}

func _AddressServices_SearchAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServicesServer).SearchAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AddressServices/SearchAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServicesServer).SearchAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressServices_ServiceDesc is the grpc.ServiceDesc for AddressServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AddressServices",
	HandlerType: (*AddressServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAddress",
			Handler:    _AddressServices_SearchAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/address.proto",
}
